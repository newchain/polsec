## <summary>Xephyr policy</summary>
## <desc>
##	<p>
##		Policy for Xephyr.
##	</p>
## </desc>


###############################
## <summary>
##	Transition to xephyr.
## </summary>
## <param name="domain">
##	<summary>
##	Domain from which to transition.
##	</summary>
## </param>

interface(`xephyr_domtrans',`
	gen_require(`
		type xephyr_t, xephyr_exec_t;
	')

	domtrans_pattern($1, xephyr_exec_t, xephyr_t)
')


###############################
## <summary>
##	Run Xephyr in xephyr domain.
## </summary>
## <param name="role">
##	<summary>
##	Role from which to exec Xephyr.
##	</summary>
## </param>

interface(`xephyr_role',`
	gen_require(`
		type xephyr_t;
	')

	xephyr_domtrans($1)
	role $2 types xephyr_t;
')


###############################
## <summary>
##	Connect to Xephyr via unix socket.
## </summary>
## <param name="domain">
##	<summary>
##	Domain from which to connect.
##	</summary>
## </param>

interface(`xephyr_stream_connect',`
	gen_require(`
		type xephyr_t;
	')

	allow $1 xephyr_t : unix_stream_socket connectto;
')


###############################
## <summary>
##	Share memory with Xephyr.
## </summary>
## <param name="domain">
##	<summary>
##	Domain from which to share.
##	</summary>
## </param>

interface(`xephyr_xshm_client',`
	gen_require(`
		type xephyr_t;
	')

	allow xephyr_t $1 : shm rw_sem_perms;
')


###############################
## <summary>
##	Constrain access of X apps to root X, Xephyr,
##	or neither.
## </summary>
## <param name="domain_prefix">
##	<summary>
##	Root of the application's domain, e.g. app in app_t.
##	</summary>
## </param>

template(`xephyr_domain_constrain_template',`

	## <desc>
	##	<p>
	##	Allow $1 to connect to xserver.
	##	</p>
	## </desc>
	gen_tunable($1_xserver_stream_connect, true)

	tunable_policy(`$1_xserver_stream_connect',`

		xserver_stream_connect($1_t)
	')

	## <desc>
	##	<p>
	##	Allow $1 to connect to Xephyr.
	##	</p>
	## </desc>
	gen_tunable($1_xephyr_stream_connect, true)

	tunable_policy(`$1_xephyr_stream_connect',`

		xephyr_stream_connect($1_t)
	')
')


###############################
## <summary>
##	Isolate X apps from root xserver.
##	or neither.
## </summary>
## <param name="domain">
##	<summary>
##	Domain to isolate.
##	</summary>
## </param>
## <param name="domain_prefix">
##	<summary>
##	Root of the application's domain, e.g. app in app_t.
##	</summary>
## </param>

template(`xephyr_isolate_from_root',`

	## <desc>
	##	<p>
	##	Isolate $1 from xserver.
	##	</p>
	## </desc>
	gen_tunable($2_isolate_from_xserver, false)

	tunable_policy(! `$2_isolate_from_xserver',`

		xserver_stream_connect($1)
	')
')


###############################
## <summary>
##	Create a private xephyr domain.
## </summary>
## <param name="domain_origin">
##	<summary>
##	<p>
##	The domain from which which to enter the private entry domain.
##	</p>
##	<p>
##	Note that pre-entrypoints must be created and labeled manually.
##	</p>
##	</summary>
## </param>
## <param name="domain_prefix">
##	<summary>
##	String to prepend the xephyr domain with.
##	</summary>
## </param>
## <param> name="role">
##	<summary>
##	Role to use the xephyr domain.
##	</summary>
## </summary>

template(`xephyr_domain_template',`

	gen_require(`
		attribute xephyr_domain;
		role $3;
		type $1;
		type xdm_tmp_t;
		type xephyr_exec_t;
		type $2_xephyr_preentry_t;
		type $2_xephyr_preentry_exec_t;
		type $2_xephyr_tmp_t;
		type xserver_t;
	')

	########################################
	#
	# Declarations
	#

	type $2_xephyr_preentry_t;
	type $2_xephyr_preentry_exec_t;
	userdom_user_application_domain($2_xephyr_preentry_t, $2_xephyr_preentry_exec_t)

	type $2_xephyr_t, xephyr_domain;
	userdom_user_application_domain($2_xephyr_t, xephyr_exec_t)

	type $2_xephyr_tmpfs_t;
	userdom_user_tmpfs_file($2_xephyr_tmpfs_t)

	type $2_xephyr_tmp_t;
	userdom_user_tmp_file($2_xephyr_tmp_t)

	attribute $2_xephyr_application;

	role $3 types { $2_xephyr_preentry_t $2_xephyr_t };

	########################################
	#
	# Local policy
	#

	domtrans_pattern($1, $2_xephyr_preentry_exec_t, $2_xephyr_preentry_t)
	domtrans_pattern($2_xephyr_preentry_t, xephyr_exec_t, $2_xephyr_t)

	files_tmp_filetrans($2_xephyr_t, $2_xephyr_tmp_t, file)
	allow $2_xephyr_t $2_xephyr_tmp_t : file manage_file_perms;

	filetrans_pattern($2_xephyr_t, xdm_tmp_t, $2_xephyr_tmp_t, sock_file)
	allow $2_xephyr_t $2_xephyr_tmp_t : sock_file { create_sock_file_perms delete_sock_file_perms };

	fs_tmpfs_filetrans($2_xephyr_t, $2_xephyr_tmpfs_t, file)
	allow { $2_xephyr_t xserver_t } $2_xephyr_tmpfs_t : file { read write };
	allow xserver_t $2_xephyr_t : shm { unix_read read getattr associate unix_write write };

	########################################
	#
	# xephyr_application local policy
	#

	allow $2_xephyr_application $2_xephyr_t : unix_stream_socket connectto;
')
